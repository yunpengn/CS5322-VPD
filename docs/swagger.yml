##################################################
#               General Information              #
##################################################
openapi: 3.0.0
info:
  title: CS5322 Project 1
  description: OAS 3.0 specifications for backend API endpoints that empower our project in CS5322 Database Security.
  termsOfService: http://www.nus.edu.sg/legal-information-notices
  contact:
    name: CS5322 Project Team
    email: neilniuyunpeng@gmail.com
  license:
    name: GNU General Public Licence 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 1.0.0

externalDocs:
  url: https://www.nus.edu.sg/

servers:
  - url: https://api.cs5322.org
    description: Production server
  - url: https://stg-api.cs5322.org
    description: Staging server
  - url: http://localhost:8080
    description: Development server

security:
  - jwt-token: []

##################################################
#                    Endpoints                   #
##################################################
paths:
  /appointments:
    get:
      summary: Gets the all future appointments of current patient
      description: This endpoint allows a patient to view his/her appointments in the future.
      tags:
        - Appointment
      responses:
        200:
          description: The appointments have been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentListResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /appointment:
    post:
      summary: Makes a new appointment
      description: This endpoint allows a receptionist to help a given patient make an appointment.
      tags:
        - Appointment
      requestBody:
        description: Request body for appointment create endpoint.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreateRequest'
        required: true
      responses:
        200:
          description: A new appointment has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentCreateResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        500:
          $ref: '#/components/responses/UnknownServerError'

    put:
      summary: Updates an existing appointment
      description: This endpoint allows a receptionist to update a previously created appointment.
      tags:
        - Appointment
      requestBody:
        description: Request body for appointment update endpoint.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentUpdateRequest'
        required: true
      responses:
        204:
          description: An appointment has been updated successfully.
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /appointment/{appointmentID}:
    get:
      summary: Gets the details of an appointment
      description: This endpoint allows a patient to view his/her appointment.
      tags:
        - Appointment
      parameters:
        - name: appointmentID
          in: path
          description: The ID of the appointment to be deleted
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: The given appointment has been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentGetResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

    delete:
      summary: Deletes an existing appointment
      description: This endpoint allows a receptionist to delete a previously created appointment.
      tags:
        - Appointment
      parameters:
        - name: appointmentID
          in: path
          description: The ID of the appointment to be deleted
          required: true
          schema:
            type: number
            format: int64
      responses:
        204:
          description: An appointment has been deleted successfully.
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /consultations:
    get:
      summary: Gets all consultations so far of current patient
      description: This endpoint allows a patient to view his/her consultations.
      tags:
        - Consultation
      responses:
        200:
          description: The consultations have been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultationListResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /consultation:
    post:
      summary: Initiates a new consultation
      description: This endpoint allows a receptionist to arrange a new consultation.
      tags:
        - Consultation
      requestBody:
        description: Request body for consultation create endpoint.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultationCreateRequest'
        required: true
      responses:
        200:
          description: A new consultation has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultationCreateResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /consultation/complete:
    post:
      summary: Completes consultation
      description: This endpoint allows a doctor to complete consultation.
      tags:
        - Consultation
      requestBody:
        description: Request body for consultation complete endpoint.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultationCompleteRequest'
        required: true
      responses:
        204:
          description: A consultation has been marked as complete.
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /consultation/{consultationID}:
    get:
      summary: Gets the details of a consultation
      description: This endpoint allows a patient to view his/her consultation.
      tags:
        - Consultation
      parameters:
        - name: consultationID
          in: path
          description: The ID of the consultation to be retrieved
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: The given consultation has been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultationGetResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /payment:
    get:
      summary: Gets the details of a payment for consultation
      description: This endpoint allows a patient to view his/her payment to a consultation.
      tags:
        - Payment
      parameters:
        - name: consultationID
          in: query
          description: The consultation ID of the payment to be retrieved
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: The given payment has been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGetResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /payment/complete:
    post:
      summary: Completes payment for a consultation
      description: This endpoint allows a receptionist to process a payment
      tags:
        - Payment
      requestBody:
        description: Request body for payment endpoint.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCompleteRequest'
        required: true
      responses:
        204:
          description: The payment has been completed.
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

  /records:
    get:
      summary: Gets the medical records of a consultation
      description: This endpoint allows a patient to view his/her medical records associated with a consultation.
      tags:
        - Record
      parameters:
        - name: consultationID
          in: query
          description: The consultation ID of the records to be retrieved
          required: true
          schema:
            type: number
            format: int64
      responses:
        200:
          description: Records have been retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordListResponse'
        400:
          $ref: '#/components/responses/InvalidRequestError'
        401:
          $ref: '#/components/responses/MissingCredentialError'
        403:
          $ref: '#/components/responses/NoPermissionError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/UnknownServerError'

##################################################
#                  Components                    #
##################################################
components:
  schemas:
    AppointmentGetResponse:
      type: object
      properties:
        appointmentID:
          type: number
          format: int64
        patientID:
          type: number
          format: int64
        doctorID:
          type: number
          format: int64
        time:
          type: string
          format: datetime
      example:
        appointmentID: 9845
        patientID: 112
        doctorID: 45
        time: 2020-08-11 14:54

    AppointmentListResponse:
      type: array
      items:
        type: object
        properties:
          appointmentID:
            type: number
            format: int64
          patientID:
            type: number
            format: int64
          doctorID:
            type: number
            format: int64
          time:
            type: string
            format: datetime
      example:
        - appointmentID: 9845
          patientID: 112
          doctorID: 45
          time: 2020-08-11 14:54

    AppointmentCreateRequest:
      type: object
      properties:
        patientID:
          type: number
          format: int64
        doctorID:
          type: number
          format: int64
        time:
          type: string
          format: datetime
      required:
        - patientID
        - doctorID
        - time
      example:
        patientID: 112
        doctorID: 45
        time: 2020-08-11 14:54

    AppointmentCreateResponse:
      type: object
      properties:
        appointmentID:
          type: number
          format: int64
      example:
        appointmentID: 9845

    AppointmentUpdateRequest:
      type: object
      properties:
        appointmentID:
          type: number
          format: int64
        doctorID:
          type: number
          format: int64
        time:
          type: string
          format: datetime
      required:
        - appointmentID
        - doctorID
        - time
      example:
        appointmentID: 2894
        doctorID: 45
        time: 2020-08-11 14:54

    ConsultationListResponse:
      type: array
      items:
        type: object
        properties:
          ConsultationID:
            type: number
            format: int64
          patientID:
            type: number
            format: int64
          doctorID:
            type: number
            format: int64
          timeStart:
            type: string
            format: datetime
          timeEnd:
            type: string
            format: datetime
      example:
        - consultationID: 3195
          patientID: 112
          doctorID: 45
          timeStart: 2020-08-11 14:54
          timeEnd: 2020-08-11 15:21

    ConsultationCreateRequest:
      type: object
      properties:
        appointmentID:
          type: number
          format: int64
        patientID:
          type: number
          format: int64
        doctorID:
          type: number
          format: int64
      required:
        - patientID
        - doctorID
        - timeStart
      example:
        patientID: 112
        doctorID: 45

    ConsultationCreateResponse:
      type: object
      properties:
        consultationID:
          type: number
          format: int64
      example:
        consultationID: 3986

    ConsultationCompleteRequest:
      type: object
      properties:
        consultationID:
          type: number
          format: int64
        amount:
          type: string
        notes:
          type: string
      example:
        consultationID: 3986
        amount: 100.5
        notes: Have done basic evaluation, and decided to refer patient to SGH.

    ConsultationGetResponse:
      type: object
      properties:
        consultationID:
          type: number
          format: int64
        patientID:
          type: number
          format: int64
        doctorID:
          type: number
          format: int64
        timeStart:
          type: string
          format: datetime
        timeEnd:
          type: string
          format: datetime
      example:
        - consultationID: 9235
          patientID: 112
          doctorID: 45
          timeStart: 2020-08-11 14:54
          timeEnd: 2020-08-11 15:21

    PaymentGetResponse:
      type: object
      properties:
        paymentID:
          type: number
          format: int64
        amount:
          type: string
        consultationID:
          type: number
          format: int64
      example:
        - paymentID: 9382
          amount: 15.98
          consultationID: 9235

    PaymentCompleteRequest:
      type: object
      properties:
        consultationID:
          type: number
          format: int64
      example:
        consultationID: 3986

    RecordListResponse:
      type: array
      items:
        type: object
        properties:
          recordID:
            type: number
            format: int64
          recordType:
            type: string
          results:
            type: string
      example:
        - recordID: 1239
          recordType: X-ray
          results: Normal, did not observe any anomaly
  responses:
    InvalidRequestError:
      description: The provided request parameter(s) and/or body is invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              reasons:
                type: array
                items:
                  type: string
            required:
              - reasons
            example:
              errCode: C002
              reasons:
                - Invalid parameter provided

    MissingCredentialError:
      description: The request could not be completed because authentication token is missing.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              reasons:
                type: array
                items:
                  type: string
            required:
              - reasons
            example:
              errCode: C003
              reasons:
                - Missing auth token

    NoPermissionError:
      description: The request could not be completed due to a missing permission scope.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              reasons:
                type: array
                items:
                  type: string
            required:
              - reasons
            example:
              errCode: C004
              reasons:
                - No permission scope

    NotFoundError:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              reasons:
                type: array
                items:
                  type: string
            required:
              - reasons
            example:
              errCode: C005
              reasons:
                - Not found

    UnknownServerError:
      description: The server is unable to serve the request at the moment. Please try again later.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              reasons:
                type: array
                items:
                  type: string
            required:
              - reasons
            example:
              errCode: S001
              reasons:
                - Unknown server error

  securitySchemes:
    jwt-token:
      type: http
      description: A JWT token must be present in the authorization header to pass this security scheme.
      scheme: bearer
      bearerFormat: JWT
